import{_ as e,o as t,c as n,N as l}from"./chunks/framework.0e180df0.js";const s="/assets/python-chaine-compilation.8bb68aab.png",g=JSON.parse('{"title":"Exécution de code Python","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/technique-d-optimisation/execution-de-code-python/index.md"}'),a={name:"cours/python/optimisation/technique-d-optimisation/execution-de-code-python/index.md"},o=l('<h1 id="execution-de-code-python" tabindex="-1">Exécution de code Python <a class="header-anchor" href="#execution-de-code-python" aria-label="Permalink to &quot;Exécution de code Python&quot;">​</a></h1><p>Le premier élément sur lequel il est possible d&#39;agir pour minimiser le temps d&#39;exécution d&#39;un programme, ou sa consommation mémoire, consiste à utiliser le meilleur <em>interpréteur Python</em> possible pour votre machine. En effet, le code source d&#39;un programme Python n&#39;est pas directement exécuté par votre machine physique, comme l&#39;illustre la figure 2.1 où on voit que l&#39;on va du <em>code source</em> au code machine.</p><figure><img src="'+s+`" width="520" height="135"><figcaption>Figure 2.1 – Un code source Python (<code>.py</code>) est généralement d&#39;abord compilé en un fichier intermédiaire (<code>.pyc</code>) qui est ensuite interprété sur la machine cible.</figcaption></figure><h2 id="interpreteur" tabindex="-1">Interpréteur <a class="header-anchor" href="#interpreteur" aria-label="Permalink to &quot;Interpréteur&quot;">​</a></h2><p>Un code source Python est tout d&#39;abord <em>compilé</em> en une forme intermédiaire, appelée <em>bytecode</em>, sauvegardée dans un fichier <code>.pyc</code> que l&#39;on peut retrouver dans le dossier <code>__pycache__</code>. Le principal but de cette étape est d&#39;éviter de réanalyser le code source à chaque fois que vous allez exécuter le même programme, sans l&#39;avoir modifié.</p><p>Voici une simple fonction qui affiche une phrase sur la sortie standard :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>À l&#39;aide du <em>module <code>dis</code></em>, on peut obtenir une forme lisible du bytecode correspondant à cette fonction. Il est simplement constitué d&#39;une séquence d&#39;instructions à exécuter :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">2           0 LOAD_GLOBAL              0 (print)</span></span>
<span class="line"><span style="color:#A6ACCD;">              2 LOAD_CONST               1 (&#39;Hello World!&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">              4 CALL_FUNCTION            1</span></span>
<span class="line"><span style="color:#A6ACCD;">              6 POP_TOP</span></span>
<span class="line"><span style="color:#A6ACCD;">              8 LOAD_CONST               0 (None)</span></span>
<span class="line"><span style="color:#A6ACCD;">             10 RETURN_VALUE</span></span></code></pre></div><p>Notez bien qu&#39;il ne s&#39;agit pas du tout d&#39;une version optimisée, ni plus rapide, du code source, mais bien d&#39;une forme compilée intermédiaire qui sera ensuite plus facile à exécuter pour l&#39;<em>interpréteur Python</em>.</p><p>Si vous exécutez cette fonction <code>hello</code> avec l&#39;interpréteur <em>CPython</em>, les six instructions bytecode montrées ci-dessus seront exécutées par ce dernier. Il s&#39;agit de la seconde étape de la figure 2.1, où le bytecode est interprété, c&#39;est-à-dire transformé à la volée en <em>code machine</em> selon l&#39;ordinateur sur lequel le programme est exécuté.</p><p>Pour être plus précis, le bytecode est exécuté sur une <em>machine virtuelle Python</em> qui, elle-même, tourne sur votre machine physique. Et c&#39;est justement sur cet élément que l&#39;on peut jouer pour améliorer les performances de l&#39;exécution, en choisissant une machine virtuelle qui optimise le mieux l&#39;exécution du bytecode pour votre propre machine.</p><h2 id="implementation-de-python" tabindex="-1">Implémentation de Python <a class="header-anchor" href="#implementation-de-python" aria-label="Permalink to &quot;Implémentation de Python&quot;">​</a></h2><p>Plusieurs autres implémentations que CPython, l&#39;implémentation officielle écrite et maintenue par la <em>Python Software Foundation</em>, existent pour le langage de programmation Python.</p><p>Le tableau 2.1 reprend quelques-unes de ces implémentations alternatives. La plus connue est <em>PyPy</em>, une implémentation écrite en RPython qui a pour but d&#39;être optimisée pour la vitesse d&#39;exécution et la consommation mémoire. Une plus récente, écrite en C et Python comme CPython et qui mérite de l&#39;attention, est <em>Pyston</em>.</p><figure><table><thead><tr><th style="text-align:left;">Nom</th><th style="text-align:left;">Dernière version</th><th style="text-align:left;">Langage</th><th style="text-align:left;">Python</th></tr></thead><tbody><tr><td style="text-align:left;">CPython</td><td style="text-align:left;">3.11.0 <small>(24 octobre 2022)</small></td><td style="text-align:left;">C, Python</td><td style="text-align:left;">3.11.0</td></tr><tr><td style="text-align:left;">PyPy</td><td style="text-align:left;">7.3.10 <small>(6 décembre 2022)</small></td><td style="text-align:left;">RPython</td><td style="text-align:left;">3.7</td></tr><tr><td style="text-align:left;">Pyston</td><td style="text-align:left;">2.3.5 <small>(26 septembre 2022)</small></td><td style="text-align:left;">C, Python</td><td style="text-align:left;">3.8.12</td></tr><tr><td style="text-align:left;">Jython</td><td style="text-align:left;">2.7.3 <small>(10 septembre 2022)</small></td><td style="text-align:left;">Java, Python</td><td style="text-align:left;">2.7</td></tr><tr><td style="text-align:left;">IronPython</td><td style="text-align:left;">2.7.12 <small>(21 janvier 2022)</small></td><td style="text-align:left;">C#</td><td style="text-align:left;">2.7</td></tr><tr><td style="text-align:left;">Stackless Python</td><td style="text-align:left;">3.8.1-slp <small>(22 janvier 2020)</small></td><td style="text-align:left;">C, Python</td><td style="text-align:left;">3.8.1</td></tr><tr><td style="text-align:left;">Brython</td><td style="text-align:left;">3.11.2 <small>(3 mars 2023)</small></td><td style="text-align:left;">JavaScript</td><td style="text-align:left;">3.11</td></tr></tbody></table><figcaption>Tableau 2.1 – Plusieurs implémentations du langage Python existent, soit pour optimiser les performances d&#39;exécution, soit pour faciliter les interactions avec un autre langage.</figcaption></figure><p>D&#39;autres implémentations ont pour but de faciliter l&#39;intégration de Python dans un écosystème existant. Par exemple, <em>Jython</em> permet d&#39;utiliser la librairie standard Java en Python, puisqu&#39;il exécute des programmes Python dans la machine virtuelle Java. <em>IronPython</em> fait pareil, mais pour l&#39;environnement .NET de Microsoft. Malheureusement, ces deux dernières implémentations ne supportent actuellement que la version 2 du langage Python, qui est aujourd&#39;hui dépréciée.</p><p>On retrouve également <em>Stackless Python</em>, une implémentation qui permet de gérer très efficacement des micro-threads pour des programmes évènementiels efficaces. On peut également utiliser Python comme langage de script client pour des pages web à l&#39;aide de <em>Brython</em>.</p>`,18),i=[o];function r(p,d,c,u,m,y){return t(),n("div",null,i)}const f=e(a,[["render",r]]);export{g as __pageData,f as default};
