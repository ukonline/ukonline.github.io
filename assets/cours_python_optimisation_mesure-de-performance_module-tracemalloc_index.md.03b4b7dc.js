import{_ as s,o as e,c as a,N as o}from"./chunks/framework.0e180df0.js";const D=JSON.parse('{"title":"Module tracemalloc","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/mesure-de-performance/module-tracemalloc/index.md"}'),n={name:"cours/python/optimisation/mesure-de-performance/module-tracemalloc/index.md"},l=o(`<h1 id="module-tracemalloc" tabindex="-1">Module tracemalloc <a class="header-anchor" href="#module-tracemalloc" aria-label="Permalink to &quot;Module tracemalloc&quot;">​</a></h1><p>Pour plus facilement obtenir de l&#39;information plus précise quant à la consommation mémoire, on peut utiliser le <em>module <code>tracemalloc</code></em>, intégré dans la librairie standard de Python depuis la version 3.4.</p><p>L&#39;idée de ce module consiste à réaliser des <em>captures</em> de l&#39;état de la mémoire à différents points dans le programme, pour pouvoir les comparer. La première chose à faire consiste à démarrer la surveillance de la mémoire avec la fonction <code>start</code>. On supprime également de la mémoire tous les objets non utilisés avec la fonction <code>collect</code> du module <code>gc</code>, pour que l&#39;analyse comparative réalisée soit la plus précise possible :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tracemalloc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">gc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">collect</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Ensuite, on fait une capture de l&#39;état de la mémoire avant et après la portion de programme d&#39;intérêt, à l&#39;aide de la fonction <code>take_snapshot</code>, en veillant à stocker les captures dans des variables :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">before </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tracemalloc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">take_snapshot</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">labels </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">after </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tracemalloc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">take_snapshot</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Enfin, pour connaitre la consommation de mémoire engendrée par la création des deux listes, l&#39;une avec des <code>float</code> et l&#39;autre avec des <code>str</code>, il faut comparer les deux captures à l&#39;aide de la méthode <code>compare_to</code> :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">top_stats </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> after</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">compare_to</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">before</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lineno</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> stat </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> top_stats</span><span style="color:#89DDFF;">[:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">stat</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Comme on le voit sur le résultat de l&#39;exécution, l&#39;option <code>lineno</code> permet de trier les informations présentées en fonction des numéros de ligne dans le code source du programme exécuté. Aussi, dans l&#39;exemple, on n&#39;affiche que les deux dernières lignes des statistiques, ce qui permet d&#39;éviter d&#39;afficher toutes les modifications de mémoire qui sont dues au module <code>tracemalloc</code> en lui-même :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">prog.py:9: size=6584 B (+6584 B), count=104 (+104), average=63 B</span></span>
<span class="line"><span style="color:#A6ACCD;">prog.py:8: size=3736 B (+3736 B), count=103 (+103), average=36 B</span></span></code></pre></div><p>On voit que la ligne 8 du programme a créé 103 nouveaux objets en mémoire, pour un total de 3736 octets (il s&#39;agit de la variable <code>data</code> et de son contenu). On voit également que la ligne 9 a créé 104 nouveaux objets en mémoire, pour un total de 6584 octets.</p><p>Cette quantité est plus grande car, comme on a déjà pu l&#39;observer dans des exemples précédents, les objets <code>str</code> occupent plus de place en mémoire que les objets <code>float</code>. En effet, il faut un caractère par chiffre et chaque caractère occupe une place en mémoire comparable à celle occupée pour un simple nombre de type <code>float</code>.</p>`,12),t=[l];function p(c,r,i,d,m,u){return e(),a("div",null,t)}const F=s(n,[["render",p]]);export{D as __pageData,F as default};
