import{_ as D,o as p,c as r,x as e,a as t,C as s,z as a,N as u,D as n}from"./chunks/framework.0e180df0.js";const T="/assets/fibonacci-appels-recursifs.6249ed5e.png",O=JSON.parse(`{"title":"Flux d'exécution","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/technique-d-optimisation/flux-d-execution/index.md"}`),A={name:"cours/python/optimisation/technique-d-optimisation/flux-d-execution/index.md"},f=u('<h1 id="flux-d-execution" tabindex="-1">Flux d&#39;exécution <a class="header-anchor" href="#flux-d-execution" aria-label="Permalink to &quot;Flux d&#39;exécution&quot;">​</a></h1><p>Enfin, pour conclure ce chapitre, un dernier élément sur lequel il est possible de jouer pour optimiser un code, c&#39;est le <em>flux d&#39;exécution</em>. Il est très important de choisir, voire de développer, le bon algorithme pour chaque problème à résoudre. Il est également important de connaitre les possibilités offertes par le langage de programmation.</p><p>Comme abordé dans <a href="./../../mesure-de-performance/">le chapitre suivant</a>, l&#39;utilisation d&#39;outils de mesure de performance permet d&#39;identifier des goulots d&#39;étranglement dans des algorithmes, et donc des zones d&#39;optimisation éventuelle.</p><h2 id="tri-de-liste" tabindex="-1">Tri de liste <a class="header-anchor" href="#tri-de-liste" aria-label="Permalink to &quot;Tri de liste&quot;">​</a></h2><p>Si on prend l&#39;exemple du tri d&#39;une liste de nombres, on peut déjà observer que bien choisir son algorithme a de l&#39;importance. Par exemple, pour trier une liste déjà triée ou presque triée, le <em>tri par insertion</em> sera généralement plus rapide que le <em>tri rapide</em>.</p>',5),h=e("em",null,"en place",-1),C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.906ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 2610.6 1083.9","aria-hidden":"true"},Q=e("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[e("g",{"data-mml-node":"math"},[e("g",{"data-mml-node":"TeXAtom","data-mjx-texclass":"ORD"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"4F",d:"M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z",style:{"stroke-width":"3"}})])]),e("g",{"data-mml-node":"mo",transform:"translate(796,0)"},[e("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),e("g",{"data-mml-node":"msup",transform:"translate(1185,0)"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),e("g",{"data-mml-node":"mn",transform:"translate(633,363) scale(0.707)"},[e("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})])]),e("g",{"data-mml-node":"mo",transform:"translate(2221.6,0)"},[e("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1),x=[Q],_={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.919ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2174 1000","aria-hidden":"true"},g=e("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[e("g",{"data-mml-node":"math"},[e("g",{"data-mml-node":"TeXAtom","data-mjx-texclass":"ORD"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"4F",d:"M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z",style:{"stroke-width":"3"}})])]),e("g",{"data-mml-node":"mo",transform:"translate(796,0)"},[e("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),e("g",{"data-mml-node":"mi",transform:"translate(1185,0)"},[e("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),e("g",{"data-mml-node":"mo",transform:"translate(1785,0)"},[e("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})])])],-1),b=[g],v=u(`<p>La deuxième chose à savoir est qu&#39;il ne faut pas forcément toujours réimplémenter les algorithmes <i>« connus »</i> soi-même. Il est, en effet, possible d&#39;utiliser des fonctions prédéfinies pour réaliser plus efficacement le tri par insertion et le tri rapide :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">insertion_sort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">)):</span></span>
<span class="line"><span style="color:#A6ACCD;">        bisect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insort</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">quick_sort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Sur la même liste de 800 éléments, on passe de 19 ms à 0,7 ms pour le tri par insertion et de 31 ms à 5 µs pour le tri rapide. On obtient donc respectivement des diminutions de temps de 96% et 99,98%.</p><h2 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;Cache&quot;">​</a></h2>`,4),w={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},k=e("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[e("g",{"data-mml-node":"math"},[e("g",{"data-mml-node":"mi"},[e("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),q=[k],L=e("sup",null,"e",-1),M=u(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> n</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">n </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">n </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Supposons que l&#39;on souhaite calculer le 25<sup>e</sup> nombre de Fibonacci. Pour cela, on exécute l&#39;appel de fonction <code>fib(25)</code> et la condition du <code>if</code> n&#39;étant pas satisfaite, on se retrouve à devoir exécuter les deux appels <code>fib(24)</code> et <code>fib(23)</code>. Chacun de ces deux appels va nécessiter deux nouveaux appels, à savoir <code>fib(23)</code> et <code>fib(22)</code> pour le premier et <code>fib(22)</code> et <code>fib(21)</code> pour le second, et ainsi de suite comme illustré par la figure 2.2. On se retrouve en fait à exécuter plusieurs fois le même appel, ce qui n&#39;est absolument pas efficace. En effet, il faut 39 ms de temps d&#39;exécution pour calculer le 25<sup>e</sup> nombre de Fibonacci, une seule fois.</p><figure><img src="`+T+`" width="293" height="192"><figcaption>Figure 2.2 – Des millions d&#39;appels récursifs sont exécutés suite à l&#39;appel <code>fib(25)</code>, lorsque l&#39;on veut calculer le 25<sup>e</sup> nombre de Fibonacci avec la fonction récursive présentée plus haut.</figcaption></figure><p>Grâce au décorateur <code>lru_cache</code> du <em>module <code>functools</code></em>, on va pouvoir sauvegarder les résultats des appels les plus récents pour éviter de devoir les recalculer. Voici comment on peut simplement faire pour stocker le résultat des 128 appels les plus récents :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">lru_cache</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">maxsize</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> n</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">n </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">n </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Cette fois-ci, pour calculer le 25<sup>e</sup> nombre de Fibonacci, il ne faut plus que 0,3 µs, soit une diminution de temps de 99,999%.</p><p>Cette technique, connue sous le nom de <em>mémoïsation</em>, consiste à utiliser plus de mémoire pour gagner du temps de calcul, en stockant dans une <em>mémoire cache</em> les résultats d&#39;appels de fonction pour éviter de les exécuter plusieurs fois. Le décorateur <code>lru_cache</code> du module <code>functools</code> permet d&#39;éviter de gérer cette mémoïsation <i>« manuellement »</i>.</p><h2 id="iterateur" tabindex="-1">Itérateur <a class="header-anchor" href="#iterateur" aria-label="Permalink to &quot;Itérateur&quot;">​</a></h2><p>Enfin, terminons avec le <em>module <code>itertools</code></em> qui contient toute une série de fonctions qui permettent de construire des itérateurs divers et variés, à directement utiliser comme blocs de base dans des algorithmes. On y retrouve, par exemple, la <em>fonction <code>product</code></em> qui permet de calculer le produit cartésien de deux collections. Voici deux fonctions qui permettent de calculer ce produit :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs_1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pairs_2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">list</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">product</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> b</span><span style="color:#89DDFF;">))</span></span></code></pre></div><p>La seconde fonction est plus rapide que la première. En effet, on passe de 193 ms à 134 ms pour calculer le produit cartésien de deux listes de 1000 éléments, soit une diminution de temps de 31%.</p>`,11);function H(V,j,S,E,P,I){const o=n("mi"),m=n("mrow"),l=n("mo"),y=n("mn"),F=n("msup"),c=n("math"),i=n("mjx-assistive-mml"),d=n("mjx-container");return p(),r("div",null,[f,e("p",null,[t("En prenant deux implémentations "),h,t(", et en les exécutant sur la même liste triée de 800 éléments, on passe de 19 ms avec le tri par insertion à 31 ms avec le tri rapide, soit une augmentation de temps de 39%. Il faut, en effet, se rappeler que le tri rapide a une complexité temporelle de "),s(d,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(p(),r("svg",C,x)),s(i,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[s(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(m,{"data-mjx-texclass":"ORD"},{default:a(()=>[s(o,{"data-mjx-variant":"-tex-calligraphic",mathvariant:"script"},{default:a(()=>[t("O")]),_:1})]),_:1}),s(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),s(F,null,{default:a(()=>[s(o,null,{default:a(()=>[t("n")]),_:1}),s(y,null,{default:a(()=>[t("2")]),_:1})]),_:1}),s(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1})]),_:1})]),_:1}),t(" dans le pire cas, à comparer à une complexité temporelle de "),s(d,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(p(),r("svg",_,b)),s(i,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[s(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(m,{"data-mjx-texclass":"ORD"},{default:a(()=>[s(o,{"data-mjx-variant":"-tex-calligraphic",mathvariant:"script"},{default:a(()=>[t("O")]),_:1})]),_:1}),s(l,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),s(o,null,{default:a(()=>[t("n")]),_:1}),s(l,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1})]),_:1})]),_:1}),t(" dans le meilleur cas pour le tri par insertion.")]),v,e("p",null,[t("Parfois, une même fonction est appelée plusieurs fois dans un même programme, avec exactement les mêmes paramètres. Si la fonction s'avère couteuse à exécuter, cela peut ralentir le programme. Prenons, par exemple, la fonction suivante qui calcule le "),s(d,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(p(),r("svg",w,q)),s(i,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[s(c,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[s(o,null,{default:a(()=>[t("n")]),_:1})]),_:1})]),_:1})]),_:1}),L,t(" nombre de Fibonacci :")]),M])}const Z=D(A,[["render",H]]);export{O as __pageData,Z as default};
