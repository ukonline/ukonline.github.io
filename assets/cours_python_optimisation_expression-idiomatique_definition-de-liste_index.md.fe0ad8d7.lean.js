import{_ as y,o as l,c as o,x as s,a as n,C as e,z as a,N as F,D as t}from"./chunks/framework.0e180df0.js";const z=JSON.parse('{"title":"Définition de liste","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/expression-idiomatique/definition-de-liste/index.md"}'),d={name:"cours/python/optimisation/expression-idiomatique/definition-de-liste/index.md"},D=s("h1",{id:"definition-de-liste",tabindex:"-1"},[n("Définition de liste "),s("a",{class:"header-anchor",href:"#definition-de-liste","aria-label":'Permalink to "Définition de liste"'},"​")],-1),u=s("i",null,"« pythonique »",-1),A=s("em",null,"définition de listes",-1),C=s("em",null,[n("méthode "),s("code",null,"append")],-1),m=s("code",null,"data",-1),f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},h=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),_=[h],x=F("",3),g=s("em",null,[n("fonction prédéfinie "),s("code",null,"map")],-1),v=s("em",null,"fonction lambda",-1),Q=s("i",null,"« pythonique »",-1),T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},b=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),w=[b],q=F("",2),k=s("em",null,[n("fonction prédéfinie "),s("code",null,"filter")],-1),L={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},E=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),V=[E],M=F("",16);function S(j,B,P,N,O,H){const p=t("mi"),i=t("math"),r=t("mjx-assistive-mml"),c=t("mjx-container");return l(),o("div",null,[D,s("p",null,[n("Le deuxième point d'attention pour un code "),u,n(" concerne la "),A,n(". La façon la plus simple de définir une liste consiste à partir d'une liste vide et d'y ajouter les éléments désirés à l'aide de la "),C,n(". Les éléments sont, par exemple, ajoutés les uns après les autres grâce à une boucle, comme dans le code suivant qui remplit la liste "),m,n(" avec les "),e(c,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(l(),o("svg",f,_)),e(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[e(i,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[e(p,null,{default:a(()=>[n("n")]),_:1})]),_:1})]),_:1})]),_:1}),n(" premières puissances de deux :")]),x,s("p",null,[n("Lorsqu'il s'agit de construire une liste à partir d'une autre, en appliquant une opération sur chaque élément de cette dernière, on peut utiliser la "),g,n(". Celle-ci prend comme premier paramètre une fonction décrivant l'opération à appliquer à chaque élément de la liste passée en second paramètre. Lorsque la fonction à appliquer est simple, il est préférable de la définir à l'aide d'une "),v,n(", pour que le code soit le plus "),Q,n(" possible. Voici deux fonctions qui créent une liste avec les "),e(c,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(l(),o("svg",T,w)),e(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[e(i,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[e(p,null,{default:a(()=>[n("n")]),_:1})]),_:1})]),_:1})]),_:1}),n(" premières puissances de deux :")]),q,s("p",null,[n("On peut aussi vouloir construire une liste à partir d'une autre en ne gardant que certains éléments, ce que l'on peut faire avec la "),k,n(". Celle-ci prend comme premier paramètre une fonction booléenne décrivant la condition que doivent satisfaire les éléments qu'il faut garder dans la liste passée en second paramètre. De nouveau, si la fonction est simple, mieux vaut utiliser une fonction lambda. Voici deux fonctions qui créent une liste avec les entiers compris entre 0 et "),e(c,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(l(),o("svg",L,V)),e(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[e(i,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[e(p,null,{default:a(()=>[n("n")]),_:1})]),_:1})]),_:1})]),_:1}),n(" qui sont divisibles soit par deux, soit par trois :")]),M])}const J=y(d,[["render",S]]);export{z as __pageData,J as default};
