import{_ as e,o as s,c as n,N as a}from"./chunks/framework.0e180df0.js";const F=JSON.parse('{"title":"Module timeit","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/mesure-de-performance/module-timeit/index.md"}'),o={name:"cours/python/optimisation/mesure-de-performance/module-timeit/index.md"},l=a(`<h1 id="module-timeit" tabindex="-1">Module timeit <a class="header-anchor" href="#module-timeit" aria-label="Permalink to &quot;Module timeit&quot;">​</a></h1><p>Mesurer le temps d&#39;exécution de parties de programme est nécessaire pour <em>profiler un code</em>. Pour facilement réaliser ces mesures, on peut utiliser le <em>module <code>timeit</code></em>, directement disponible dans la librairie standard de Python. Les fonctions proposées dans ce dernier sont faites pour être les plus faciles et les moins intrusives possibles à utiliser, en comparaison avec la méthode <i>« manuelle »</i> présentée à la section précédente.</p><h2 id="utilisation-en-ligne-de-commande" tabindex="-1">Utilisation en ligne de commande <a class="header-anchor" href="#utilisation-en-ligne-de-commande" aria-label="Permalink to &quot;Utilisation en ligne de commande&quot;">​</a></h2><p>Avec le module <code>timeit</code>, il est possible de mesurer le <em>temps d&#39;exécution d&#39;instructions</em> Python directement en ligne de commande. Voici, par exemple, comment mesurer le temps d&#39;exécution d&#39;une boucle qui calcule la somme des 1000 premiers nombres entiers :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&gt; python3 -m timeit &#39;sum = 0&#39; &#39;for i in range(1001): sum += i&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">5000 loops, best of 5: 93.5 usec per loop</span></span></code></pre></div><p>L&#39;option <code>-m</code> indique qu&#39;il faut lancer le module <code>timeit</code> en mode script et les paramètres suivants contiennent les instructions à exécuter. Dans cet exemple, on déclare une variable <code>sum</code> initialisée à 0, puis on exécute la boucle de calcul de la somme désirée.</p><p>Le résultat de la commande indique que le temps qui a été mesuré est celui pris par 5000 exécutions et que, sur 5 répétitions de la mesure de temps, le meilleur obtenu est de 93.5 µs, par boucle.</p><p>On peut également mesurer le temps d&#39;exécution d&#39;instructions qui font référence à du code provenant de scripts Python. Voici, par exemple, comment mesurer l&#39;exécution de l&#39;appel <code>fib(25)</code> :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&gt; python3 -m timeit -s &#39;from prog import fib&#39; &#39;fib(25)&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">10 loops, best of 5: 36.7 msec per loop</span></span></code></pre></div><p>L&#39;option <code>-s</code> permet d&#39;indiquer une instruction qui ne sera exécutée qu&#39;une seule fois, avant de lancer le code dont il faut mesurer le temps d&#39;exécution. Dans notre cas, on importe la fonction <code>fib</code> depuis le fichier <code>prog.py</code>. Le résultat obtenu indique un temps d&#39;exécution de 36.7 ms pour l&#39;appel <code>fib(25)</code>, ce qui est similaire aux résultats obtenus précédemment, avec la méthode <i>« manuelle »</i>.</p><p>Par défaut, le module <code>timeit</code> choisit lui-même le nombre de fois qu&#39;il faut répéter les instructions pour chaque mesure de temps et il répète les mesures de temps 5 fois. On peut modifier les valeurs de ces deux paramètres, détaillés plus loin, avec les options <code>-n</code> et <code>-r</code> :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&gt; python3 -m timeit -n 100 -r 3 -s &#39;from prog import fib&#39; &#39;fib(25)&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">100 loops, best of 3: 38.5 msec per loop</span></span></code></pre></div><h2 id="utilisation-en-python" tabindex="-1">Utilisation en Python <a class="header-anchor" href="#utilisation-en-python" aria-label="Permalink to &quot;Utilisation en Python&quot;">​</a></h2><p>On peut obtenir le même résultat sans passer par la ligne de commande, mais en écrivant un script Python. Pour cela, il suffit d&#39;appeler la <em>fonction <code>timeit</code></em> en lui fournissant le code qu&#39;elle doit appeler et mesurer, typiquement sous la forme d&#39;une <em>fonction lambda</em>.</p><p>Voici comment on peut mesurer le temps d&#39;exécution de l&#39;appel <code>fib(25)</code>, en supposant que la fonction <code>fib</code> soit définie plus haut dans le script et en ayant préalablement importé le module <code>timeit</code> :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">N </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> timeit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">lambda</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> fib</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">number</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">N</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> N </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">result</span><span style="color:#C792EA;">:.2f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> s&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">time</span><span style="color:#C792EA;">:.1f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> ms&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Le nombre d&#39;exécutions à faire se définit avec le paramètre <code>number</code> qui correspond à l&#39;option <code>-n</code> de la version en ligne de commande, et dont la valeur par défaut est d&#39;un million. La valeur renvoyée par la fonction <code>timeit</code> contient le temps d&#39;exécution total pour toutes les exécutions demandées, en secondes. Pour obtenir le temps moyen, il suffit de diviser la valeur obtenue par le nombre d&#39;exécutions. Le résultat obtenu est de nouveau similaire à ceux obtenus précédemment :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">3.98 s</span></span>
<span class="line"><span style="color:#A6ACCD;">39.8 ms</span></span></code></pre></div><p>On peut aussi utiliser la fonction <code>timeit</code> avec un code à n&#39;exécuter qu&#39;une seule fois avant de lancer les mesures, comme ce que permet l&#39;option <code>-s</code> de la version en ligne de commande. Concernant les instructions dont il faut mesurer le temps d&#39;exécution, on peut aussi les fournir comme une chaine de caractères plutôt qu&#39;avec une fonction lambda.</p><p>Voici comment on pourrait réécrire l&#39;exemple précédent en important directement la définition de la fonction <code>fib</code> depuis le fichier <code>prog.py</code> plutôt que de mettre le code de mesure dans le même fichier :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">N </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#A6ACCD;">setup </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">from prog import fib</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">stmt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fib(25)</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> timeit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeit</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">stmt</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> setup</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">number</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">N</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> N </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">time</span><span style="color:#C792EA;">:.1f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> ms&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h2 id="jeu-de-tests-aleatoire" tabindex="-1">Jeu de tests aléatoire <a class="header-anchor" href="#jeu-de-tests-aleatoire" aria-label="Permalink to &quot;Jeu de tests aléatoire&quot;">​</a></h2><p>Dans les exemples précédents, on testait à chaque fois un appel précis d&#39;une fonction. Néanmoins, lorsque l&#39;on souhaite évaluer le temps d&#39;exécution d&#39;une fonction, de manière générale, il faudrait théoriquement l&#39;exécuter avec toutes les valeurs possibles pour ses paramètres et faire une moyenne des temps d&#39;exécution obtenus.</p><p>Évidemment, comme il y potentiellement une infinité de valeurs possibles, c&#39;est pratiquement impossible de toutes les tester. Pour avoir une bonne idée du temps d&#39;exécution moyen d&#39;une fonction, une solution consiste à l&#39;exécuter avec des <em>valeurs aléatoires</em> pour les différents paramètres et à ensuite calculer une moyenne des temps d&#39;exécution obtenus.</p><p>Pour illustrer cela, voici un exemple qui mesure le temps d&#39;exécution de la fonction <code>pairs_2</code> (dont la définition se trouve à <a href="./../../technique-d-optimisation/flux-d-execution/#iterateur">la section 2.6.3</a>), en l&#39;appelant avec deux listes de mille valeurs aléatoires comprises entre 0 et 100 (exclu) :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">N </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">setup </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;&#39;</span><span style="color:#C3E88D;">import random</span></span>
<span class="line"><span style="color:#C3E88D;">from __main__ import pairs_2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">a = random.choices(range(100), k=1000)</span></span>
<span class="line"><span style="color:#C3E88D;">b = random.choices(range(100), k=1000)</span><span style="color:#89DDFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">stmt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pairs_2(a, b)</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>Le code contenu dans la variable <code>setup</code> est exécuté une seule fois avant les 100 exécutions de l&#39;appel <code>pairs_2(a, b)</code>. On voit également que, pour pouvoir appeler la fonction <code>pairs_2</code>, il faut l&#39;importer depuis <code>__main__</code> si elle se trouve dans le même fichier, ce qui n&#39;était pas nécessaire lorsque l&#39;on définissait le code à exécuter avec une fonction lambda.</p><p>Enfin, il faut lancer plusieurs fois la fonction <code>timeit</code> pour que la partie <code>setup</code> soit exécutée plusieurs fois et que plusieurs <em>jeux de tests aléatoires</em> soient utilisés pour la mesure du temps d&#39;exécution. Concrètement, on peut simplement utiliser la <em>fonction <code>repeat</code></em>, au lieu de la fonction <code>timeit</code>, qui est dans le même module. On spécifie ensuite le nombre de fois qu&#39;il faut répéter l&#39;expérience grâce au paramètre <code>repeat</code> :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> timeit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">repeat</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">stmt</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> setup</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">number</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">N</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">repeat</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">time </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">result</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> N </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;</span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">time</span><span style="color:#C792EA;">:.1f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> ms&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Le résultat renvoyé par la fonction <code>repeat</code> est une liste qui contient les temps moyens de chacune des expériences, à savoir trois dans notre exemple. Habituellement, on prend la plus petite valeur de cette liste comme résultat du profilage du temps d&#39;exécution, comme cela a été fait dans l&#39;exemple ci-dessus dont l&#39;exécution affiche :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[13.789451262, 13.616268809, 13.455259594000005]</span></span>
<span class="line"><span style="color:#A6ACCD;">134.6 ms</span></span></code></pre></div><p>Le paramètre <code>repeat</code> correspond en fait à l&#39;option <code>-r</code> de la version en ligne de commande et est optionnel, sa valeur par défaut étant de 5.</p>`,32),t=[l];function p(i,c,r,u,d,m){return s(),n("div",null,t)}const D=e(o,[["render",p]]);export{F as __pageData,D as default};
