import{_ as s,o as e,c as n,N as a}from"./chunks/framework.0e180df0.js";const D=JSON.parse(`{"title":"Temps d'exécution","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/mesure-de-performance/temps-d-execution/index.md"}`),l={name:"cours/python/optimisation/mesure-de-performance/temps-d-execution/index.md"},o=a(`<h1 id="temps-d-execution" tabindex="-1">Temps d&#39;exécution <a class="header-anchor" href="#temps-d-execution" aria-label="Permalink to &quot;Temps d&#39;exécution&quot;">​</a></h1><p>La première chose qu&#39;il est intéressant de pouvoir analyser par rapport à un programme, c&#39;est d&#39;évaluer son <em>temps d&#39;exécution</em>. Ce qu&#39;il faut donc mesurer, c&#39;est le temps qui s&#39;est écoulé entre le moment où le programme est lancé et le moment où son exécution est terminée.</p><h2 id="outil-du-systeme-d-exploitation" tabindex="-1">Outil du système d&#39;exploitation <a class="header-anchor" href="#outil-du-systeme-d-exploitation" aria-label="Permalink to &quot;Outil du système d&#39;exploitation&quot;">​</a></h2><p>Une première possibilité pour mesurer le temps d&#39;exécution d&#39;un programme consiste à utiliser des <em>outils de votre système d&#39;exploitation</em> en lançant le programme en ligne de commande. Sous Linux et macOS, on peut utiliser la <em>commande <code>time</code></em> avec le programme à analyser :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&gt; time python3 fib.py</span></span>
<span class="line"><span style="color:#A6ACCD;">python3 fib.py  0,08s user 0,01s system 91% cpu 0,098 total</span></span></code></pre></div><p>Le résultat obtenu avec cet exemple montre que le programme <code>fib.py</code> a pris 0.08 s de <em>temps utilisateur</em> pour s&#39;exécuter. Cela signifie qu&#39;entre le moment où le programme a été lancé dans le terminal et le moment où il s&#39;est terminé, 0.08 s se sont écoulées. On peut également voir que le programme n&#39;a pris que 0.01 s de <em>temps système</em>. Comme détaillé plus loin, à <a href="./../type-de-temps/">la section 3.3</a>, on verra qu&#39;il existe différents types de temps.</p><p>Sous Windows, on peut utiliser la commande <code>Measure-Command</code> de l&#39;interpréteur de commande de l&#39;outil <em>Windows Powershell</em> :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&gt; Measure-Command { python fib.py }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Days              : 0</span></span>
<span class="line"><span style="color:#A6ACCD;">Hours             : 0</span></span>
<span class="line"><span style="color:#A6ACCD;">Minutes           : 0</span></span>
<span class="line"><span style="color:#A6ACCD;">Seconds           : 0</span></span>
<span class="line"><span style="color:#A6ACCD;">Milliseconds      : 71</span></span>
<span class="line"><span style="color:#A6ACCD;">Ticks             : 712543</span></span>
<span class="line"><span style="color:#A6ACCD;">TotalDays         : 8,24702546296296E-07</span></span>
<span class="line"><span style="color:#A6ACCD;">TotalHours        : 1,97928611111111E-05</span></span>
<span class="line"><span style="color:#A6ACCD;">TotalMinutes      : 0,00118757166666667</span></span>
<span class="line"><span style="color:#A6ACCD;">TotalSeconds      : 0,0712543</span></span>
<span class="line"><span style="color:#A6ACCD;">TotalMilliseconds : 71,2543</span></span></code></pre></div><p>Avec cette commande sous Windows, seul le temps utilisateur est renseigné dans le résultat, et dans plusieurs unités différentes. On a un temps d&#39;exécution de 0.07 s, valeur similaire à celle obtenue précédemment.</p><p>Cette façon de procéder est évidemment limitée à la mesure du temps d&#39;exécution d&#39;un programme complet. De plus, elle prend aussi en compte le temps de démarrage de la machine virtuelle Python.</p><h2 id="chronometre-manuel-avec-python" tabindex="-1">Chronomètre manuel avec Python <a class="header-anchor" href="#chronometre-manuel-avec-python" aria-label="Permalink to &quot;Chronomètre manuel avec Python&quot;">​</a></h2><p>Une autre possibilité pour mesurer le temps d&#39;exécution consiste à le faire directement depuis le programme, en Python. Cette façon de faire est même nécessaire si l&#39;on veut ne mesurer que le temps d&#39;exécution d&#39;une partie de programme. La façon la plus simple consiste à utiliser la <em>fonction <code>time</code></em> du <em>module <code>time</code></em>. Cette dernière renvoie le nombre de secondes écoulées depuis le 1<sup>er</sup> janvier 1970 et, en capturant cette valeur avant et après l&#39;exécution d&#39;une partie de programme, on va pouvoir connaitre le temps qu&#39;elle a pris pour s&#39;exécuter.</p><p>Mesurons, par exemple, le temps que prend l&#39;exécution de <code>fib(25)</code> grâce au code suivant, où <code>start</code> et <code>end</code> figent des instants dans le temps :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">end </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">elapsed </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> end </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;Temps d</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">exécution : </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">elapsed</span><span style="color:#C792EA;">:.2</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> s&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Un problème avec cette méthode est que l&#39;on ne mesure le temps d&#39;exécution d&#39;une partie de programme qu&#39;une seule fois. Si on relance plusieurs fois le programme, la valeur mesurée va fort probablement varier, notamment selon l&#39;occupation de l&#39;ordinateur, par d&#39;autres activités. Voici le résultat d&#39;une exécution de ce programme :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Temps d&#39;exécution : 0.04 s</span></span></code></pre></div><p>Ce problème de précision se présente évidemment également avec les mesures faites avec les outils du système d&#39;exploitation. Pour y pallier, il faut répéter la mesure plusieurs fois et calculer une moyenne sur plusieurs exécutions. Ceci est évidemment plus facile à faire lorsque les mesures de temps sont directement réalisées en Python.</p><p>Voici une version modifiée du code de mesure qui va répéter la mesure du temps d&#39;exécution 100 fois et stocker tous les temps mesurés dans une liste. On utilise ensuite le <em>module <code>statistics</code></em> pour calculer la moyenne et l&#39;écart-type des temps d&#39;exécution mesurés :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">measures </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">fib</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">25</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    end </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">time</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    measures</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">end </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> start</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">mean </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> statistics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mean</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">measures</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">stdev </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> statistics</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stdev</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">measures</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Temps d</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">exécution :</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39; - Moyenne : </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">mean</span><span style="color:#C792EA;">:.2f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> s&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39; - Écart-type : </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">stdev</span><span style="color:#C792EA;">:.3f</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> s&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>L&#39;exécution de ce programme donne la moyenne et l&#39;écart-type des temps d&#39;exécution sur 100 exécutions de l&#39;appel <code>fib(25)</code> :</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Temps d&#39;exécution :</span></span>
<span class="line"><span style="color:#A6ACCD;"> - Moyenne : 0.04 s</span></span>
<span class="line"><span style="color:#A6ACCD;"> - Écart-type : 0.002 s</span></span></code></pre></div><p>Le deuxième problème de cette méthode est qu&#39;il faut modifier le code à mesurer, de manière plutôt intrusive, pour pouvoir effectuer les mesures des temps d&#39;exécution. Ce problème ne se présentait pas en utilisant les outils du système d&#39;exploitation.</p>`,22),p=[o];function t(r,c,i,m,u,d){return e(),n("div",null,p)}const C=s(l,[["render",t]]);export{D as __pageData,C as default};
