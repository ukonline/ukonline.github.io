import{_ as e,o as s,c as n,N as a}from"./chunks/framework.0e180df0.js";const D=JSON.parse('{"title":"Fonction prédéfinie","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/technique-d-optimisation/fonction-predefinie/index.md"}'),o={name:"cours/python/optimisation/technique-d-optimisation/fonction-predefinie/index.md"},l=a(`<h1 id="fonction-predefinie" tabindex="-1">Fonction prédéfinie <a class="header-anchor" href="#fonction-predefinie" aria-label="Permalink to &quot;Fonction prédéfinie&quot;">​</a></h1><p>Python étant un langage en partie interprété, un programme écrit avec ce langage est, par nature, plus lent que le même programme écrit avec un langage complètement compilé comme le C, par exemple.</p><p>Par contre, comme on a pu le constater dans <a href="./../../expression-idiomatique/">le premier chapitre</a>, les <em>fonctions prédéfinies</em> de Python permettent d&#39;accélérer significativement le temps d&#39;exécution des programmes les utilisant. La raison est simplement que les appels à ces fonctions sont, pour la plupart, simplement des relais vers une librairie en C compilée en code natif. Cela résulte donc forcément en un temps exécution beaucoup plus rapide, le code de la librairie étant compilé pour la machine.</p><p>Voici deux fonctions qui permettent de calculer la somme de tous les nombres entiers d&#39;une liste :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sumint_1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> d</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sumint_2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>La seconde fonction est beaucoup plus rapide que la première. En effet, on passe de 74 ms à 26 ms pour calculer la somme d&#39;un million de nombres entiers, soit une diminution de temps de 65%.</p><p>C&#39;est donc important de connaitre les fonctions prédéfinies de Python, mais également celles disponibles dans la librairie standard ou d&#39;autres librairies. Tout code pouvant ne pas être interprété, mais directement exécuté nativement sur la machine, sera toujours plus rapide à exécuter.</p><h2 id="liste-de-booleens" tabindex="-1">Liste de booléens <a class="header-anchor" href="#liste-de-booleens" aria-label="Permalink to &quot;Liste de booléens&quot;">​</a></h2><p>La <em>fonction prédéfinie <code>all</code></em> permet de tester si toutes les valeurs d&#39;une liste valent <code>True</code>, et la <em>fonction prédéfinie <code>any</code></em> si une liste contient au moins une valeur à <code>True</code>. C&#39;est plus rapide d&#39;utiliser ces fonctions que d&#39;itérer <i>« manuellement »</i> les listes pour vérifier leur contenu. Voici comment on pourrait implémenter la fonction <code>all</code> <i>« à la main »</i> :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">all</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span></code></pre></div><p>Cette fonction <code>all</code> écrite en Python est beaucoup plus lente que la fonction prédéfinie <code>all</code>. En effet, elle ne prend que 5 ms pour traiter une liste d&#39;un million de valeurs, au lieu de 13 ms pour la version <i>« manuelle »</i>, soit une diminution de 62%.</p><h2 id="liste-de-nombres" tabindex="-1">Liste de nombres <a class="header-anchor" href="#liste-de-nombres" aria-label="Permalink to &quot;Liste de nombres&quot;">​</a></h2><p>Comme on l&#39;a vu précédemment, la <em>fonction prédéfinie <code>sum</code></em> calcule la somme des valeurs d&#39;une liste de nombres. On peut également trouver la plus grande valeur d&#39;une telle liste avec la <em>fonction prédéfinie <code>max</code></em> et la plus petite valeur avec la <em>fonction prédéfinie <code>min</code></em>. Voici, par exemple, comment on pourrait implémenter la fonction <code>min</code> <i>« à la main »</i> :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> d</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><p>Cette fonction <code>min</code> écrite en Python est plus lente que la fonction prédéfinie <code>min</code>. En effet, elle ne prend que 39 ms pour traiter une liste d&#39;un million d&#39;éléments, au lieu de 55 ms pour la version <i>« manuelle »</i>, soit une diminution de 29%. La même observation se fait évidemment avec la fonction prédéfinie <code>max</code>.</p>`,15),t=[l];function p(i,r,c,d,u,m){return s(),n("div",null,t)}const C=e(o,[["render",p]]);export{D as __pageData,C as default};
