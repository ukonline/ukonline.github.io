import{_ as s,o as e,c as n,N as a}from"./chunks/framework.0e180df0.js";const u=JSON.parse('{"title":"Génération à la demande","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/expression-idiomatique/generation-a-la-demande/index.md"}'),l={name:"cours/python/optimisation/expression-idiomatique/generation-a-la-demande/index.md"},o=a(`<h1 id="generation-a-la-demande" tabindex="-1">Génération à la demande <a class="header-anchor" href="#generation-a-la-demande" aria-label="Permalink to &quot;Génération à la demande&quot;">​</a></h1><p>Les techniques et expressions idiomatiques présentées dans les deux sections précédentes peuvent améliorer le temps d&#39;exécution.</p><p>On va maintenant s&#39;intéresser à l&#39;amélioration de la consommation de mémoire avec les <em>générateurs</em>. L&#39;idée est assez simple : il s&#39;agit de réaliser ce que l&#39;on appelle une <em>génération fainéante</em> à la demande. L&#39;exemple suivant construit une liste d&#39;un million d&#39;éléments :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000000</span><span style="color:#89DDFF;">)]</span></span></code></pre></div><p>Outre le temps nécessaire à l&#39;exécution de cette instruction, à savoir 89 ms pour générer le million de valeurs, l&#39;espace mémoire nécessaire pour les stocker est d&#39;environ 35 Mio.</p><h2 id="generateur" tabindex="-1">Générateur <a class="header-anchor" href="#generateur" aria-label="Permalink to &quot;Générateur&quot;">​</a></h2><p>Il est parfois préférable de ne garder en mémoire que les données utilisées, voire de ne générer les données d&#39;une collection que lorsqu&#39;elles deviennent utiles. Un générateur construit un <em>itérateur</em>, plutôt qu&#39;une liste complète, dont les éléments ne seront générés qu&#39;à la demande.</p><p>Voici comment réécrire l&#39;exemple précédent avec un générateur :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1000000</span><span style="color:#89DDFF;">))</span></span></code></pre></div><p>L&#39;occupation mémoire a été radicalement réduite, passant à seulement 624 o pour stocker le générateur, pour un temps d&#39;exécution d&#39;à peine un centième de milliseconde pour créer le générateur.</p><p>La majeure différence entre une séquence explicite et un générateur est qu&#39;il n&#39;est pas possible d&#39;utiliser l&#39;<em>opérateur d&#39;accès</em> avec ce dernier. Par exemple, l&#39;instruction suivante produit une erreur d&#39;exécution :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">])</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#A6ACCD;">  File &quot;program.py&quot;, line 2, in &lt;module&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    print(data[0])</span></span>
<span class="line"><span style="color:#A6ACCD;">TypeError: &#39;generator&#39; object is not subscriptable</span></span></code></pre></div><p>S&#39;agissant d&#39;un itérateur, les éléments d&#39;un générateur sont soit parcourus avec la fonction prédéfinie <code>next</code>, soit à l&#39;aide d&#39;une boucle <code>for</code>. Voici un exemple concret où l&#39;intérêt du générateur, et de la génération de données à la demande, est indéniable pour économiser des ressources :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">login_1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">identifier</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">password</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">PASSWORD_FILE</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> file</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> line </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> file</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> line</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">strip</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">split</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> identifier </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">password</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span></code></pre></div><p>Cette fonction ouvre un fichier texte à l&#39;aide de la fonction prédéfinie <code>open</code>. Cette dernière renvoie un générateur permettant d&#39;itérer sur les lignes du fichier. Grâce à une boucle <code>for</code>, ces lignes sont inspectées l&#39;une après l&#39;autre, pour vérifier si l&#39;une d&#39;entre elles correspond à l&#39;identifiant et au mot de passe spécifiés en paramètres.</p><p>Lorsqu&#39;une ligne correspond, la fonction s&#39;arrête immédiatement en renvoyant <code>True</code> et seules les lignes du fichier précédant la ligne correspondante ont été générées, le reste du fichier n&#39;a pas été parcouru. Si le fichier est gros, des accès inutiles au disque ont ainsi pu être évités.</p><h2 id="chainage-de-generateurs" tabindex="-1">Chainage de générateurs <a class="header-anchor" href="#chainage-de-generateurs" aria-label="Permalink to &quot;Chainage de générateurs&quot;">​</a></h2><p>Il est possible de construire un générateur sur base d&#39;un autre, pour économiser un maximum de ressources et pour améliorer les temps d&#39;exécution des programmes. En réalité, on a déjà exploité cette possibilité étant donné que la fonction <code>range</code> renvoie en fait un générateur, tout comme les fonctions <code>map</code> et <code>filter</code> vues précédemment, d&#39;ailleurs.</p><p>Voici comment on pourrait simplifier la fonction <code>login_1</code> de la page précédente pour rendre le code plus lisible et séparer la partie qui lit le fichier de celle qui fait la comparaison des identifiants et mots de passe :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read_credentials</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> file</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> line </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> file</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">tuple</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">line</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">strip</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">split</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">login_2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">identifier</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">password</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read_credentials</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">PASSWORD_FILE</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> identifier </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">password</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span></code></pre></div><p>L&#39;<em>instruction <code>yield</code></em> permet de renvoyer une valeur au moment où elle est nécessaire. Grâce à cela, la fonction <code>read_credentials</code> renvoie donc un générateur qui renverra des tuples avec un identifiant et le mot de passe associé, directement extraits du fichier à la demande.</p><p>On a donc construit un générateur, sur base de celui renvoyé par l&#39;ouverture du fichier. Ce dernier est simplement parcouru par la fonction <code>login_2</code>, pour une comparaison fainéante des identifiants reçus en paramètre. Cette possibilité de <em>chainer des générateurs</em> permet de construire des programmes modulaires, ce qui améliore leur lisibilité et accroit la réutilisation de portions de code, en l&#39;occurrence des fonctions.</p>`,23),t=[o];function p(r,c,i,y,D,d){return e(),n("div",null,t)}const A=s(l,[["render",p]]);export{u as __pageData,A as default};
