import{_ as y,o as l,c as o,x as s,a as e,C as n,z as a,N as d,D as t}from"./chunks/framework.0e180df0.js";const J=JSON.parse('{"title":"Style de programmation","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/technique-d-optimisation/style-de-programmation/index.md"}'),D={name:"cours/python/optimisation/technique-d-optimisation/style-de-programmation/index.md"},m=d('<h1 id="style-de-programmation" tabindex="-1">Style de programmation <a class="header-anchor" href="#style-de-programmation" aria-label="Permalink to &quot;Style de programmation&quot;">​</a></h1><p>Une première façon d&#39;optimiser un code consiste à adopter un bon <em>style de programmation</em>. Il est dès lors important de directement prendre de bonnes habitudes lorsque vous apprenez un nouveau langage.</p><p>On peut distinguer deux principales catégories de <em>règles de style</em>. Les règles générales ne dépendent pas d&#39;un langage de programmation et les spécifiques sont liées à un langage ou à un paradigme de programmation bien identifié. On a déjà pu aborder la deuxième catégorie de règles de style, dans le cas de Python, dans <a href="./../../expression-idiomatique/">le premier chapitre</a>. Cette section présente quelques règles générales permettant d&#39;optimiser un code et qui sont applicables à n&#39;importe quel langage de programmation.</p><h2 id="operation-couteuse" tabindex="-1">Opération couteuse <a class="header-anchor" href="#operation-couteuse" aria-label="Permalink to &quot;Opération couteuse&quot;">​</a></h2><p>Lorsque l&#39;on écrit des programmes, il faut se rappeler que toutes les opérations, aussi élémentaires soient-elles, n&#39;ont pas le même cout en termes de <em>temps d&#39;exécution</em>. Par exemple, une multiplication prend plus de temps qu&#39;une addition et une division ou un modulo prend encore plus de temps. Aussi, les opérations sur des nombres à virgule flottante sont plus lentes à être exécutées que celles sur des nombres entiers. En particulier, les opérations trigonométriques, la racine carrée ou l&#39;exponentiation nécessitent beaucoup de temps de calcul.</p><p>Concernant <em>la mémoire</em>, tout traitement où il n&#39;est pas possible de connaitre la taille des structures de données à l&#39;avance risque de consommer plus de mémoire que ce qui est vraiment nécessaire.</p><h3 id="multiplication" tabindex="-1">Multiplication <a class="header-anchor" href="#multiplication" aria-label="Permalink to &quot;Multiplication&quot;">​</a></h3>',7),F=s("em",null,"multiplications",-1),C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},A=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),h=[A],f=d(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">gen10multiple_1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div>`,1),v=s("code",null,"i",-1),g={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},x=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),b=[x],_=s("code",null,"i * 10",-1),Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.62ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1600 688","aria-hidden":"true"},T=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}}),s("path",{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z",transform:"translate(500,0)",style:{"stroke-width":"3"}})]),s("g",{"data-mml-node":"mi",transform:"translate(1000,0)"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),q=[T],w=s("code",null,"i",-1),k=d(`<div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">gen10multiple_2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">n</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div>`,1),E={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},V=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),P=[V],L=d(`<h3 id="nombre-a-virgule-flottante" tabindex="-1">Nombre à virgule flottante <a class="header-anchor" href="#nombre-a-virgule-flottante" aria-label="Permalink to &quot;Nombre à virgule flottante&quot;">​</a></h3><p>De manière générale, les calculs effectués sur des nombres entiers (<code>int</code>) sont plus rapides à exécuter que des calculs effectués sur des nombres à virgule flottante (<code>float</code>). Lorsqu&#39;il est possible d&#39;éviter les <em>calculs en nombres à virgule flottante</em>, en écrivant son programme autrement, il faut donc le faire si l&#39;on veut diminuer le temps d&#39;exécution.</p><p>Par exemple, si vous écrivez un programme qui doit manipuler des prix, vous pouvez décider de stocker tous les prix en centimes et ainsi vous limiter à des nombres entiers. En plus d&#39;éviter des erreurs d&#39;arrondis liées au calcul en nombres à virgule flottante, l&#39;exécution de vos programmes sera légèrement plus rapide. Cependant, cette accélération dépend du langage de programmation et elle sera significative, par exemple, pour des programmes écrits en C ou en Java. En Python, les choses sont un peu différentes comme on va le voir avec la fonction suivante qui permet de calculer la somme des éléments d&#39;une liste de prix :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sumprices</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">prices</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> prices</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        result </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> p</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><p>En exécutant cette fonction avec un million de prix en nombres à virgule flottante, on obtient un temps d&#39;exécution de 39 ms. En appelant la même fonction avec les mêmes prix, mais qui ont été préalablement multipliés par 100 pour en faire des nombres entiers, on se retrouve avec un temps d&#39;exécution de 72 ms, soit 46% de temps en plus.</p><p>La raison est que Python travaille en <em>précision arbitraire</em> pour représenter les nombres entiers. Il s&#39;agit donc d&#39;objets complexes pour lesquels les opérations peuvent s&#39;avérer couteuses en temps d&#39;exécution, contrairement à des langages comme le C ou le Java où les <code>int</code> sont représentés avec un espace mémoire de taille fixe (typiquement 32 ou 64 bits) et les opérations directement effectuées par le processeur.</p><h2 id="repetition-de-code" tabindex="-1">Répétition de code <a class="header-anchor" href="#repetition-de-code" aria-label="Permalink to &quot;Répétition de code&quot;">​</a></h2><p>Évidemment, ce qu&#39;il faut éviter au maximum dans un programme, ce sont les <em>répétitions</em> d&#39;un même code plusieurs fois, lorsque ce n&#39;est pas nécessaire. Comme on l&#39;a vu au <a href="./../../expression-idiomatique/">chapitre précédent</a>, une des techniques possibles consiste à stocker dans une <em>variable locale</em> le résultat d&#39;une opération, pour ne pas la répéter plusieurs fois inutilement.</p><p>Par exemple, dans le cas d&#39;une boucle, il faut essayer de sortir les calculs de valeurs constantes, c&#39;est-à-dire qui ne changent pas entre les itérations. Voici une fonction qui permet de calculer le périmètre de plusieurs cercles dont on connait le rayon :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">circle_perimeter_1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">pi</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><p>Dans ce simple exemple, on se rend compte que l&#39;expression <code>2 * math.pi</code> est répété à chaque itération de la boucle, alors que sa valeur reste la même. Ce que l&#39;on peut faire, c&#39;est réaliser ce calcul une seule fois en dehors de la boucle et stocker le résultat dans une variable locale :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">circle_perimeter_2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    dp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> math</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">pi</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">dp </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> r</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><p>La seconde fonction est bien plus rapide que la première. En effet, on passe de 294 ms à 179 ms pour calculer les périmètres d&#39;un million de cercles, soit une diminution de temps de 39%.</p><h2 id="test-inutile" tabindex="-1">Test inutile <a class="header-anchor" href="#test-inutile" aria-label="Permalink to &quot;Test inutile&quot;">​</a></h2><p>Une dernière catégorie de règles de style générales qu&#39;il est possible d&#39;adopter concerne les <em>tests inutiles</em>. Des tests, typiquement effectués dans les instructions conditionnelles (<code>if-else</code>) et répétitives (<code>while</code>), sont représentés par des <em>expressions booléennes</em>. Dans plusieurs cas, certains styles peuvent améliorer les performances.</p><h3 id="comparaison-avec-litteral-booleen" tabindex="-1">Comparaison avec littéral booléen <a class="header-anchor" href="#comparaison-avec-litteral-booleen" aria-label="Permalink to &quot;Comparaison avec littéral booléen&quot;">​</a></h3><p>Dans une expression booléenne, il ne faut jamais comparer une variable directement au littéral <code>True</code> ou <code>False</code>. En effet, si vous faites une telle comparaison, c&#39;est que la variable est booléenne et vaut déjà <code>True</code> ou <code>False</code>. Par exemple, les conditions des deux instructions suivantes sont à éviter, car elles comportent de la redondance :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> cond </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vrai !</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> cond </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Faux !</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Les deux instructions peuvent être simplifiées comme suit, en utilisant directement la variable booléenne comme condition, ou en l&#39;utilisant combinée avec l&#39;opérateur NON logique, à savoir <code>not</code> en Python :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> cond</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vrai !</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> cond</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Faux !</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Cela peut avoir un effet non-négligeable sur les performances d&#39;exécution de portions de code d&#39;un programme. Voici deux fonctions qui permettent de compter le nombre d&#39;éléments valant <code>True</code> dans une liste de booléens :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">count_bool_1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True:</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">count_bool_2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            result </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><p>La seconde fonction est plus rapide que la première. En effet, on passe de 64 ms à 46 ms pour compter le nombre de valeurs divisibles par 2 ou par 3, entre 0 et un million, soit une diminution de temps de 28%.</p><p>Avec Python, une autre simplification consiste à remplacer les comparaisons avec la valeur spéciale <code>None</code>. Au lieu d&#39;utiliser l&#39;opérateur <code>==</code>, il faut utiliser <code>is</code> et donc écrire <code>var is None</code> au lieu de <code>var == None</code>.</p><h3 id="instruction-else-inutile" tabindex="-1">Instruction else inutile <a class="header-anchor" href="#instruction-else-inutile" aria-label="Permalink to &quot;Instruction else inutile&quot;">​</a></h3><p>Un autre élément parfois simplifiable dans le cas des instructions <code>if-else</code> est le fait que l&#39;on peut parfois se passer de la clause <code>else</code>. En effet, lorsque le but d&#39;une instruction <code>if-else</code> est d&#39;affecter une valeur différente à une variable, selon qu&#39;une condition soit satisfaite ou non, on se retrouve souvent avec un code comme :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> cond</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    var </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Valeur 1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    var </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Valeur 2</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>Dans ce cas précis, on peut simplifier le code en initialisant la variable avec la valeur mise dans le <code>else</code> et en supprimant donc cette dernière clause. Pour l&#39;exemple précédent, le code devient donc :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Valeur 2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> cond</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    var </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Valeur 1</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>Si l&#39;opération faite par défaut, c&#39;est-à-dire celle extraite et placée avant l&#39;instruction <code>if</code>, n&#39;est pas trop lourde, alors écrire le code de cette manière peut contribuer à accélérer la vitesse d&#39;exécution du code.</p><p>On peut également retirer le <code>else</code> dans une fonction lorsque le contenu de ce dernier est un <code>return</code>, puisqu&#39;en plus de renvoyer une valeur, l&#39;instruction <code>return</code> quitte immédiatement la fonction. Voici deux fonctions qui permettent de calculer la valeur absolue d&#39;un nombre :</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">abs_1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">val</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> val</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">abs_2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">val</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> val</span></span></code></pre></div><p>Pour cet exemple, la seconde fonction est un peu plus rapide que la première. En effet, on passe de 187 ms à 184 ms pour calculer la valeur absolue d&#39;un million de nombres, soit une diminution de temps de 2%.</p>`,33);function M(S,N,H,j,I,B){const p=t("mi"),r=t("math"),c=t("mjx-assistive-mml"),i=t("mjx-container"),u=t("mn");return l(),o("div",null,[m,s("p",null,[e("Les "),F,e(" prennent donc plus de temps que les additions, de l'ordre de quatre fois plus. Lorsqu'il est possible de les éviter, en écrivant le code autrement, il faut le faire si on veut accélérer l'exécution. Voici une fonction qui permet de générer les "),n(i,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(l(),o("svg",C,h)),n(c,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(p,null,{default:a(()=>[e("n")]),_:1})]),_:1})]),_:1})]),_:1}),e(" premiers multiples de 10 :")]),f,s("p",null,[e("Dans cette fonction, la variable "),v,e(" démarre à 0 pour finir à "),n(i,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(l(),o("svg",g,b)),n(c,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(p,null,{default:a(()=>[e("n")]),_:1})]),_:1})]),_:1})]),_:1}),e(" (exclu) et, à chaque tour de boucle, on calcule et affiche la valeur de "),_,e(".")]),s("p",null,[e("Il est possible d'éviter cette multiplication en la remplaçant par une addition. En Python, on va simplement faire une boucle qui démarre de 0 et qui va jusqu'à "),n(i,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(l(),o("svg",Q,q)),n(c,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(u,null,{default:a(()=>[e("10")]),_:1}),n(p,null,{default:a(()=>[e("n")]),_:1})]),_:1})]),_:1})]),_:1}),e(" (exclu), par pas de 10, c'est-à-dire en additionnant la valeur 10 à celle de "),w,e(" à chaque itération :")]),k,s("p",null,[e("La seconde fonction, qui ne fait plus qu'une seule multiplication, est plus rapide que la première. En effet, on passe de 194 ms à 143 ms avec un "),n(i,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:a(()=>[(l(),o("svg",E,P)),n(c,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:a(()=>[n(r,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:a(()=>[n(p,null,{default:a(()=>[e("n")]),_:1})]),_:1})]),_:1})]),_:1}),e(" fixé à un million, soit une diminution de temps de 26%.")]),L])}const O=y(D,[["render",M]]);export{J as __pageData,O as default};
