import{_ as e,o as i,c as t,N as o}from"./chunks/framework.0e180df0.js";const f=JSON.parse(`{"title":"Python Efficace : Pratiques et astuces d'optimisation de code","description":"","frontmatter":{},"headers":[],"relativePath":"cours/python/optimisation/index.md"}`),a={name:"cours/python/optimisation/index.md"},r=o('<h1 id="python-efficace-pratiques-et-astuces-d-optimisation-de-code" tabindex="-1">Python Efficace : Pratiques et astuces d&#39;optimisation de code <a class="header-anchor" href="#python-efficace-pratiques-et-astuces-d-optimisation-de-code" aria-label="Permalink to &quot;Python Efficace : Pratiques et astuces d&#39;optimisation de code&quot;">​</a></h1><h2 id="partie-1-expression-idiomatique-et-bonne-pratique-python" tabindex="-1">Partie 1 : Expression idiomatique et bonne pratique Python <a class="header-anchor" href="#partie-1-expression-idiomatique-et-bonne-pratique-python" aria-label="Permalink to &quot;Partie 1 : Expression idiomatique et bonne pratique Python&quot;">​</a></h2><p>Cette première partie se concentre essentiellement sur les bonnes manières d&#39;écrire du code Python, permettant d&#39;améliorer naturellement la vitesse d&#39;exécution des programmes Python. En particulier, elle décrit les principales <em>expressions idiomatiques</em> de Python qui permettent d&#39;écrire du code plus <i>« pythonique »</i>. En exploitant ainsi au maximum les possibilités qui vous sont offertes par le langage et en pratiquant les <em>techniques d&#39;optimisation</em> abordées dans cette partie, les performances de vos programmes Python seront directement améliorées.</p><ul><li><a href="./expression-idiomatique/">Chapitre 1 : Expression idiomatique</a><ul><li><a href="./expression-idiomatique/concatenation-de-chaines-de-caracteres/">1.1. Concaténation de chaines de caractères</a></li><li><a href="./expression-idiomatique/definition-de-liste/">1.2. Définition de liste</a></li><li><a href="./expression-idiomatique/generation-a-la-demande/">1.3. Génération à la demande</a></li><li><a href="./expression-idiomatique/parcours-de-collection/">1.4. Parcours de collection</a></li><li><a href="./expression-idiomatique/gestion-d-erreur/">1.5. Gestion d&#39;erreur</a></li><li><a href="./expression-idiomatique/variable-locale/">1.6. Variable locale</a></li></ul></li><li><a href="./technique-d-optimisation/">Chapitre 2 : Technique d&#39;optimisation</a><ul><li><a href="./technique-d-optimisation/execution-de-code-python/">2.1. Exécution de code Python</a></li><li><a href="./technique-d-optimisation/optimisation-de-code/">2.2. Optimisation de code</a></li><li><a href="./technique-d-optimisation/style-de-programmation/">2.3. Style de programmation</a></li><li><a href="./technique-d-optimisation/fonction-predefinie/">2.4. Fonction prédéfinie</a></li><li><a href="./technique-d-optimisation/structure-de-donnees/">2.5. Structure de données</a></li><li><a href="./technique-d-optimisation/flux-d-execution/">2.6. Flux d&#39;exécution</a></li></ul></li></ul><h2 id="partie-2-analyse-de-performance-et-outil-d-audit-de-code-python" tabindex="-1">Partie 2 : Analyse de performance et outil d&#39;audit de code Python <a class="header-anchor" href="#partie-2-analyse-de-performance-et-outil-d-audit-de-code-python" aria-label="Permalink to &quot;Partie 2 : Analyse de performance et outil d&#39;audit de code Python&quot;">​</a></h2><p>Cette seconde partie présente plusieurs méthodes et outils permettant d&#39;analyser et d&#39;améliorer les performances de programmes Python. En particulier, elle présente d&#39;abord comment <em>mesurer les performances</em> d&#39;un code Python, par rapport à son temps d&#39;exécution et sa consommation mémoire. Elle explique ensuite comment <em>réaliser un simple audit</em> pour identifier les portions qui consomment le plus de temps CPU et de mémoire RAM, à l&#39;aide d&#39;outils d&#39;analyse de code et d&#39;exécution, pour que vous puissiez ensuite agir en optimisant vos codes.</p><ul><li><a href="./mesure-de-performance/">Chapitre 3 : Mesure de performance</a><ul><li><a href="./mesure-de-performance/temps-d-execution/">3.1. Temps d&#39;exécution</a></li><li><a href="./mesure-de-performance/module-timeit/">3.2. Module timeit</a></li><li><a href="./mesure-de-performance/type-de-temps/">3.3. Type de temps</a></li><li><a href="./mesure-de-performance/consommation-memoire/">3.4. Consommation mémoire</a></li><li><a href="./mesure-de-performance/module-tracemalloc/">3.5. Module tracemalloc</a></li><li><a href="./mesure-de-performance/module-guppy/">3.6. Module guppy</a></li></ul></li><li><a href="./audit-de-code/">Chapitre 4 : Audit de code</a><ul><li><a href="./audit-de-code/profilage/">4.1. Profilage</a></li><li><a href="./audit-de-code/profil-de-temps-d-execution/">4.2. Profil de temps d&#39;exécution</a></li><li><a href="./audit-de-code/appel-de-fonction/">4.3. Appel de fonction</a></li><li><a href="./audit-de-code/profil-de-consommation-memoire/">4.4. Profil de consommation mémoire</a></li><li><a href="./audit-de-code/opportunite-d-optimisation/">4.5. Opportunité d&#39;optimisation</a></li></ul></li></ul>',7),n=[r];function d(s,l,p,c,m,u){return i(),t("div",null,n)}const q=e(a,[["render",d]]);export{f as __pageData,q as default};
